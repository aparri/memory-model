			=========================
			LINUX KERNEL MEMORY MODEL
			=========================

============
INTRODUCTION
============

The memory model of the Linux kernel written in the "cat" language and
executable by the (externally provided) "herd7" simulator, allowing
the state space of small litmus tests to be exhaustively explored.
In addition, the "klitmus7" tool (also externally provided) may be used
to convert a litmus test to a Linux kernel module, which in turn allows
that litmus test to be exercised within the Linux kernel.


============
REQUIREMENTS
============

The "herd7" and "klitmus7" tools must be downloaded separately:

  https://github.com/herd/herdtools7

See "herdtools7/INSTALL.md" for installation instructions.

Alternatively, Abhishek Bhardwaj has kindly provided a Docker image
of these tools at "abhishek40/memory-model".  Abhishek suggests the
following commands to install and use this image:

- Users should install Docker for their distribution.
- docker run -itd abhishek40/memory-model
- docker attach <id-emitted-from-the-previous-command>

Gentoo users might wish to make use of Patrick McLean's package:

https://gitweb.gentoo.org/repo/gentoo.git/tree/dev-util/herdtools7


==================
BASIC USAGE: HERD7
==================

  $ herd7 -conf linux-kernel.cfg [option(s)] <litmus_test(s)>

For example, to run MP+poonceonces.litmus:

  $ herd7 -conf linux-kernel.cfg litmus-tests/MP+poonceonces.litmus

Here is the corresponding output:

  Test MP+poonceonces Allowed
  States 4
  1:r0=0; 1:r1=0;
  1:r0=0; 1:r1=1;
  1:r0=1; 1:r1=0;
  1:r0=1; 1:r1=1;
  Ok
  Witnesses
  Positive: 1 Negative: 3
  Condition exists (1:r0=1 /\ 1:r1=0)
  Observation MP+poonceonces Sometimes 1 3
  Time MP+poonceonces 0.01
  Hash=791a930f10ec3578ffdda7bf43deeb22

The "Positive: 1 Negative: 3" and the "Sometimes 1 3" each indicate that
this litmus test's "exists" clause can be satisfied.

See "herd7 -help" or "herdtools7/doc/" for more information.


=====================
BASIC USAGE: KLITMUS7
=====================

The "klitmus7" tool converts a litmus test into a Linux kernel module,
which may then be loaded and run.  Here are the commands to do just this
from the directory containing this memory-model directory:

 $ mkdir mymodules
 $ klitmus7 -o mymodules memory-model/litmus-tests/*.litmus
 $ cd mymodules ; make
 $ sudo sh run.sh

The output lists the states reached, similar to the output of "herd7".
And, as with "herd7", please see "klitmus7 -help" or "herdtools7/doc/"
for more information.


===========
DESCRIPTION
===========

Documentation/explanation.txt
	Describes the memory model in detail.
	
Documentation/recipes.txt
	Lists common memory-ordering patterns.
	
Documentation/references.txt
	Provides background reading.

linux-kernel.bell
	Categorizes the relevant instructions, including memory
	references, memory barriers, atomic read-modify-write operations,
	lock acquisition/release, and RCU operations.

	More formally, this file (1) lists the subtypes of the various
	event types used by the memory model and (2) performs RCU
	read-side critical section nesting analysis.

linux-kernel.cat
	Specifies what reorderings are forbidden by memory references,
	memory barriers, atomic read-modify-write operations, and RCU.

	More formally, this file specifies what executions are forbidden
	by the memory model.  Allowed executions are those which
	satisfy the model's "coherence", "atomic", "happens-before",
	"propagation", and "rcu" axioms, which are defined in the file.

linux-kernel.cfg
	Convenience file that gathers the common-case herd7 command-line
	arguments.

linux-kernel.def
	Maps from C-like syntax to herd7's internal litmus-test
	instruction-set architecture.

litmus-tests
	Directory containing a few representative litmus tests, which
	are listed in litmus-tests/README.  A great deal more litmus
	tests are available at https://github.com/paulmckrcu/litmus.

lock.cat
	Provides a front-end analysis of lock acquisition and release,
	for example, associating a lock acquisition with the corresponding
	release and checking for self-deadlock.

	More formally, this file defines a performance-enhanced scheme
	for generation of the possible reads-from and coherence order
	relations on the locking primitives.

README
	This file.
